import { RowInput, RowOperator } from ".";
import assert from "assert";
import { UtilityRowData } from "../../shared/transformer/advanced";
/** ------------------------------------------------------------------------- */

/**
 * A `<reference>` tag, but for utilities.
 * 
 * Utilities are dynamically generated by other transformers.
 * 
 * @see ReferenceRow
 */
export class UtilityRow implements RowOperator {
  private readonly table: string;
  private readonly match: string;
  private readonly take: string;
  private readonly group: string;

  public constructor(input: UtilityRowData) {
    this.table = input.table;
    this.match = input.match;
    this.take = input.take;
    this.group = input.group;
  }

  run(input: RowInput): Maybe<string> {
    const reference_reply = input.state.references.getTable(this.table);
    assert.ok(reference_reply.ok, `Table ${this.table} not loaded!`);

    const view = reference_reply.data.view(this.match);

    const result = view.ask({
      [this.match]: input.value,
      group: this.group,
    }, this.take);
    
    assert.ok(result != null, `Table '${this.table}' has no '${this.match}' for '${input.value}'.`);
    return result;
  }
}
